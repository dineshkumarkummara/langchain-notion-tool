{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LangChain Notion Tools","text":"<p>LangChain Notion Tools brings first-class read and write capabilities for Notion into LangChain agents and workflows. The package provides:</p> <ul> <li><code>NotionSearchTool</code> \u2013 locate databases and pages with normalized results ready for LLMs.</li> <li><code>NotionWriteTool</code> \u2013 create or update pages with rich block payloads, property updates, and   dry-run previews.</li> <li><code>NotionToolkit</code> \u2013 convenience factory bundling both tools with shared retry-aware clients.</li> <li>Block helper utilities, Markdown-to-Notion conversion, and a lightweight CLI for rapid   debugging.</li> </ul>"},{"location":"#why-this-package","title":"Why this package","text":"<ul> <li>Agent native \u2013 tools implement the LangChain tool protocol with sync and async runtimes.</li> <li>Secure by design \u2013 block allowlists, size limits, and safe token redaction are enabled by   default.</li> <li>LLM-friendly shape \u2013 inputs and outputs are powered by Pydantic models with JSON schema   tuned for structured prompting.</li> <li>Ergonomic \u2013 ship a CLI, docs, and runnable examples so you can iterate quickly.</li> </ul> <p>\ud83d\udca1 Compatibility: Requires Python 3.9+, <code>langchain-core&gt;=0.3</code>, and the official <code>notion-client</code> SDK.</p> <p>Explore the remainder of the docs for quickstarts, configuration tips, worked examples, and JSON schema references suitable for LLM prompt injection.</p>"},{"location":"#documentation-map","title":"Documentation map","text":"<ul> <li>Quickstart \u2013 install, authenticate, and create your first Notion page.</li> <li>Examples \u2013 end-to-end LangChain agent flows with synchronous and async clients.</li> <li>API Reference \u2013 autogenerated signatures and docstrings for public objects.</li> <li>Contributing \u2013 guidance for extending blocks and tooling safely.</li> <li>Configuration \u2013 environment variables and advanced client settings.</li> </ul>"},{"location":"api_reference/","title":"API Reference","text":"<p>This reference is generated automatically from the package docstrings using <code>mkdocstrings</code>. Use it to explore the public APIs exposed by the toolkit, tools, configuration helpers, and block utilities.</p>"},{"location":"api_reference/#toolkit","title":"Toolkit","text":"<p>Toolkit factory for Notion tools.</p>"},{"location":"api_reference/#langchain_notion_tools.toolkit.NotionToolkit","title":"<code>NotionToolkit(settings, bundle, search, write)</code>  <code>dataclass</code>","text":"<p>Container bundling preconfigured Notion tools.</p>"},{"location":"api_reference/#langchain_notion_tools.toolkit.create_toolkit","title":"<code>create_toolkit(*, api_token=None, default_parent_page_id=None, settings=None, env=None)</code>","text":"<p>Build a NotionToolkit with shared clients for both tools.</p>"},{"location":"api_reference/#tools","title":"Tools","text":"<p>Search tool implementation for Notion.</p> <p>Write tool implementation for Notion.</p>"},{"location":"api_reference/#langchain_notion_tools.tools.search.NotionSearchTool","title":"<code>NotionSearchTool(*, api_token=None, default_parent_page_id=None, settings=None, client=None, async_client=None, env=None, **kwargs)</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>LangChain tool that exposes Notion search capabilities.</p>"},{"location":"api_reference/#langchain_notion_tools.tools.write.NotionWriteTool","title":"<code>NotionWriteTool(*, api_token=None, default_parent_page_id=None, settings=None, client=None, async_client=None, env=None, **kwargs)</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>LangChain tool that creates or updates Notion content.</p>"},{"location":"api_reference/#clients","title":"Clients","text":"<p>Factory helpers to construct Notion clients.</p>"},{"location":"api_reference/#langchain_notion_tools.client.NotionClientBundle","title":"<code>NotionClientBundle</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>Container for paired sync and async Notion clients.</p>"},{"location":"api_reference/#langchain_notion_tools.client.create_client_bundle","title":"<code>create_client_bundle(*, api_token=None, default_parent_page_id=None, settings=None, client=None, async_client=None, env=None, client_kwargs=None, async_client_kwargs=None)</code>","text":"<p>Create both sync and async Notion clients with shared configuration.</p>"},{"location":"api_reference/#langchain_notion_tools.client.create_sync_client","title":"<code>create_sync_client(*, api_token=None, default_parent_page_id=None, settings=None, client=None, env=None, **client_kwargs)</code>","text":"<p>Create or return a configured synchronous Notion client.</p>"},{"location":"api_reference/#langchain_notion_tools.client.create_async_client","title":"<code>create_async_client(*, api_token=None, default_parent_page_id=None, settings=None, async_client=None, env=None, **client_kwargs)</code>","text":"<p>Create or return a configured asynchronous Notion client.</p>"},{"location":"api_reference/#configuration","title":"Configuration","text":"<p>Configuration helpers for Notion client access.</p>"},{"location":"api_reference/#langchain_notion_tools.config.NOTION_API_TOKEN_ENV_VAR","title":"<code>NOTION_API_TOKEN_ENV_VAR = 'NOTION_API_TOKEN'</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/#langchain_notion_tools.config.NOTION_DEFAULT_PARENT_PAGE_ID_ENV_VAR","title":"<code>NOTION_DEFAULT_PARENT_PAGE_ID_ENV_VAR = 'NOTION_DEFAULT_PARENT_PAGE_ID'</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/#langchain_notion_tools.config.NotionClientSettings","title":"<code>NotionClientSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Validated configuration for accessing the Notion API.</p>"},{"location":"api_reference/#langchain_notion_tools.config.NotionClientSettings.from_env","title":"<code>from_env(env=None)</code>  <code>classmethod</code>","text":"<p>Load settings from environment variables.</p>"},{"location":"api_reference/#langchain_notion_tools.config.NotionClientSettings.require_parent","title":"<code>require_parent()</code>","text":"<p>Return the default parent page ID or raise an error if missing.</p>"},{"location":"api_reference/#langchain_notion_tools.config.NotionClientSettings.resolve","title":"<code>resolve(*, api_token=None, default_parent_page_id=None, settings=None, env=None)</code>  <code>classmethod</code>","text":"<p>Resolve settings from explicit values, existing settings, or env.</p>"},{"location":"api_reference/#langchain_notion_tools.config.redact_token","title":"<code>redact_token(token)</code>","text":"<p>Redact a token value for safe logging.</p>"},{"location":"api_reference/#blocks","title":"Blocks","text":"<p>Helper utilities for working with Notion block payloads.</p>"},{"location":"api_reference/#langchain_notion_tools.blocks.ALLOWED_BLOCK_TYPES","title":"<code>ALLOWED_BLOCK_TYPES = {'paragraph', 'heading_1', 'heading_2', 'heading_3', 'bulleted_list_item', 'numbered_list_item', 'to_do', 'toggle', 'callout', 'quote', 'code'}</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.MAX_BLOCKS","title":"<code>MAX_BLOCKS = 50</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.MAX_TOTAL_TEXT_LENGTH","title":"<code>MAX_TOTAL_TEXT_LENGTH = 4000</code>  <code>module-attribute</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.bulleted_list_item","title":"<code>bulleted_list_item(text)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.callout","title":"<code>callout(text, *, icon=None)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.code","title":"<code>code(text, *, language='plain text')</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.from_text","title":"<code>from_text(text)</code>","text":"<p>Convert a lightweight markdown-esque text into Notion blocks.</p>"},{"location":"api_reference/#langchain_notion_tools.blocks.heading_1","title":"<code>heading_1(text)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.heading_2","title":"<code>heading_2(text)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.heading_3","title":"<code>heading_3(text)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.numbered_list_item","title":"<code>numbered_list_item(text)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.paragraph","title":"<code>paragraph(text)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.quote","title":"<code>quote(text)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.sanitize_blocks","title":"<code>sanitize_blocks(blocks, *, allow_code_links=False)</code>","text":"<p>Validate and sanitize a sequence of Notion block payloads.</p>"},{"location":"api_reference/#langchain_notion_tools.blocks.to_do","title":"<code>to_do(text, *, checked=False)</code>","text":""},{"location":"api_reference/#langchain_notion_tools.blocks.toggle","title":"<code>toggle(text, *, children=None)</code>","text":""},{"location":"configuration/","title":"Configuration","text":"<p>LangChain Notion Tools reads configuration from environment variables, keyword arguments, or a pre-built <code>NotionClientSettings</code> instance. This page summarizes the available options.</p>"},{"location":"configuration/#required-variables","title":"Required variables","text":"Environment variable Description <code>NOTION_API_TOKEN</code> Required integration token for all operations."},{"location":"configuration/#optional-variables","title":"Optional variables","text":"Environment variable Description <code>NOTION_DEFAULT_PARENT_PAGE_ID</code> Default page or database where new pages should be created when no explicit parent is supplied. <code>NOTION_API_TIMEOUT</code> Optional override for HTTP timeout (seconds). Defaults to <code>30</code>. <code>NOTION_API_MAX_RETRIES</code> Optional override for retry attempts on transient failures. Defaults to <code>3</code>. <p>Settings are validated using Pydantic and invalid values trigger <code>NotionConfigurationError</code> with actionable hints.</p>"},{"location":"configuration/#http-settings","title":"HTTP settings","text":"<p>The underlying Notion SDK uses <code>httpx</code>. You can pass custom client options through the <code>client_kwargs</code>/<code>async_client_kwargs</code> parameters of <code>create_client_bundle</code>, <code>create_sync_client</code>, or <code>create_async_client</code> if you need to tweak retry or timeout behaviour.</p> <pre><code>from langchain_notion_tools import create_client_bundle\n\nclients = create_client_bundle(\n    api_token=\"...\",\n    client_kwargs={\"timeout\": 15},\n    async_client_kwargs={\"timeout\": 30},\n)\n</code></pre>"},{"location":"configuration/#logging","title":"Logging","text":"<p>The package uses the standard library <code>logging</code> module. Tokens are redacted by default. Enable verbose logging when troubleshooting:</p> <pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"configuration/#cli-configuration","title":"CLI configuration","text":"<p>The CLI commands (<code>notion-search</code> and <code>notion-write</code>) respect the same environment variables. A <code>.env</code> file is loaded automatically when you run the examples in the <code>examples/</code> folder.</p>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>We welcome improvements, bug fixes, and new block helpers. This guide covers the basics for extending the toolkit and shipping high-quality pull requests.</p>"},{"location":"contributing/#development-environment","title":"Development environment","text":"<ol> <li>Fork the repository and clone it locally.</li> <li>Install the project in editable mode with the development extras:</li> </ol> <p><code>bash    pip install -e .[dev]</code></p> <ol> <li>Run the quality checks before opening a pull request:</li> </ol> <p><code>bash    ruff check .    mypy --config-file mypy.ini src    pytest</code></p> <p>MkDocs-powered documentation lives in <code>docs/</code>. Use <code>mkdocs serve</code> for live rendering while editing.</p>"},{"location":"contributing/#adding-or-extending-blocks","title":"Adding or extending blocks","text":"<ul> <li>New helpers belong in <code>src/langchain_notion_tools/blocks.py</code>. Keep the public   API ergonomic, mirroring Notion's block metadata.</li> <li>Validate payloads with <code>sanitize_blocks</code> to enforce block allowlists, maximum   block counts, and total text length limits.</li> <li>Add unit tests covering success paths, failure scenarios, and serialization   behaviour in <code>tests/test_blocks.py</code>.</li> <li>Document the helper with docstrings and update <code>docs/api_reference.md</code> if the   helper should appear in the API reference.</li> <li>Refresh examples if the new helper unlocks a notable workflow (see   <code>docs/examples.md</code>).</li> </ul>"},{"location":"contributing/#extending-tools-or-the-client-bundle","title":"Extending tools or the client bundle","text":"<ul> <li>Implement changes in the relevant module (<code>tools/</code>, <code>client.py</code>, <code>config.py</code>),   keeping docstrings up to date.</li> <li>Write tests under <code>tests/tools/</code> or <code>tests/</code> that exercise new behaviour. Use   the existing fixtures for synchronous and asynchronous clients when possible.</li> <li>When updating request or response payloads, update the JSON schemas that power   agent integrations.</li> </ul>"},{"location":"contributing/#pull-request-checklist","title":"Pull request checklist","text":"<ul> <li>[ ] Lints, type checks, and tests all pass locally.</li> <li>[ ] Documentation, changelog, and examples reflect the change.</li> <li>[ ] Commits follow Conventional Commits       and PRs include a summary plus testing notes.</li> <li>[ ] Sensitive values (tokens, database IDs) are anonymised in examples and       fixtures.</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>End-to-end LangChain agent flow examples that you can run locally.</p> <p>The snippets below run as doctests. They use in-memory stand-ins for the Notion SDK so you can experiment without calling the live API. Swap the stub classes for real <code>notion-client</code> instances when integrating into your project.</p> <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from langchain_notion_tools.config import NotionClientSettings\n&gt;&gt;&gt; from langchain_notion_tools.tools import NotionSearchTool, NotionWriteTool\n&gt;&gt;&gt; from langchain_notion_tools.blocks import from_text\n&gt;&gt;&gt; class MemoryPages:\n...     def __init__(self):\n...         self.created = []\n...         self.updated = []\n...         self.retrieved = {}\n...     def create(self, **payload):\n...         self.created.append(payload)\n...         page_id = f\"page-{len(self.created)}\"\n...         url = f\"https://notion.local/{page_id}\"\n...         self.retrieved[page_id] = {\"id\": page_id, \"url\": url}\n...         return {\"id\": page_id, \"url\": url}\n...     def update(self, *, page_id, properties):\n...         self.updated.append((page_id, properties))\n...         return {\"id\": page_id, \"url\": f\"https://notion.local/{page_id}\"}\n...     def retrieve(self, *, page_id):\n...         return self.retrieved.get(page_id, {\"id\": page_id, \"url\": f\"https://notion.local/{page_id}\"})\n&gt;&gt;&gt; class MemoryBlocksChildren:\n...     def __init__(self):\n...         self.appended = []\n...     def append(self, **payload):\n...         self.appended.append(payload)\n...         return {\"results\": payload.get(\"children\", [])}\n&gt;&gt;&gt; class MemoryBlocks:\n...     def __init__(self):\n...         self.children = MemoryBlocksChildren()\n&gt;&gt;&gt; class MemoryAsyncPages(MemoryPages):\n...     async def create(self, **payload):\n...         return super().create(**payload)\n...     async def update(self, *, page_id, properties):\n...         return super().update(page_id=page_id, properties=properties)\n...     async def retrieve(self, *, page_id):\n...         return super().retrieve(page_id=page_id)\n&gt;&gt;&gt; class MemoryAsyncBlocksChildren(MemoryBlocksChildren):\n...     async def append(self, **payload):\n...         return super().append(**payload)\n&gt;&gt;&gt; class MemoryAsyncBlocks:\n...     def __init__(self):\n...         self.children = MemoryAsyncBlocksChildren()\n&gt;&gt;&gt; class MemorySearch:\n...     def __init__(self, results):\n...         self.results = results\n...         self.calls = []\n...     def __call__(self, **kwargs):\n...         self.calls.append(kwargs)\n...         return {\"results\": self.results}\n&gt;&gt;&gt; class MemoryDatabases:\n...     def __init__(self, rows):\n...         self.rows = rows\n...         self.calls = []\n...     def query(self, *, database_id, **kwargs):\n...         self.calls.append((database_id, kwargs))\n...         return {\"results\": self.rows}\n&gt;&gt;&gt; class MemoryClient:\n...     def __init__(self, search_results=None, database_rows=None):\n...         self.pages = MemoryPages()\n...         self.blocks = MemoryBlocks()\n...         self.search = MemorySearch(search_results or [])\n...         self.databases = MemoryDatabases(database_rows or [])\n&gt;&gt;&gt; class MemoryAsyncClient:\n...     def __init__(self, search_results=None, database_rows=None):\n...         self.pages = MemoryAsyncPages()\n...         self.blocks = MemoryAsyncBlocks()\n...         self.search = MemorySearch(search_results or [])\n...         self.databases = MemoryDatabases(database_rows or [])\n</code></pre>"},{"location":"examples/#1-create-a-page-then-append-an-action-items-section","title":"1. Create a page then append an action items section","text":"<pre><code>&gt;&gt;&gt; sync_client = MemoryClient()\n&gt;&gt;&gt; async_client = MemoryAsyncClient()\n&gt;&gt;&gt; settings = NotionClientSettings(api_token=\"test-token\")\n&gt;&gt;&gt; write_tool = NotionWriteTool(settings=settings, client=sync_client, async_client=async_client)\n&gt;&gt;&gt; draft_blocks = from_text(\"\"\"# Weekly Review\\n\\n- Align roadmap\\n- Confirm launch dates\"\"\")\n&gt;&gt;&gt; write_tool.run(title=\"Weekly Review\", parent={\"page_id\": \"parent-1\"}, blocks=draft_blocks)[\"summary\"]\n\"Created page under page parent-1 with title 'Weekly Review' and 3 block(s).\"\n&gt;&gt;&gt; action_items = from_text(\"\"\"### Action Items\\n- Draft release notes\\n- Schedule beta kickoff\"\"\")\n&gt;&gt;&gt; write_tool.run(update={\"page_id\": \"page-1\", \"mode\": \"append\"}, blocks=action_items)[\"summary\"]\n\"Appended 2 block(s) on page page-1.\"\n</code></pre>"},{"location":"examples/#2-update-an-existing-page-with-a-summary","title":"2. Update an existing page with a summary","text":"<pre><code>&gt;&gt;&gt; write_tool.run(\n...     update={\"page_id\": \"page-1\", \"mode\": \"append\"},\n...     blocks=from_text(\"## Summary\\n- Reached parity with v1\"),\n... )[\"summary\"]\n\"Appended 1 block(s) on page page-1.\"\n</code></pre>"},{"location":"examples/#3-find-a-spec-then-post-a-decision-log","title":"3. Find a spec then post a decision log","text":"<pre><code>&gt;&gt;&gt; spec_hit = [{\n...     \"object\": \"page\",\n...     \"id\": \"spec-123\",\n...     \"url\": \"https://notion.local/spec-123\",\n...     \"parent\": {\"type\": \"database_id\", \"database_id\": \"db-specs\"},\n...     \"properties\": {\n...         \"Title\": {\"type\": \"title\", \"title\": [{\"plain_text\": \"API Spec\"}]},\n...         \"Summary\": {\"type\": \"rich_text\", \"rich_text\": [{\"plain_text\": \"Latest API changes\"}]},\n...     },\n... }]\n&gt;&gt;&gt; sync_client.search = MemorySearch(spec_hit)\n&gt;&gt;&gt; async_client.search = MemorySearch(spec_hit)\n&gt;&gt;&gt; search_tool = NotionSearchTool(client=sync_client, async_client=async_client)\n&gt;&gt;&gt; search_tool.run(query=\"API spec\")\n[{'title': 'API Spec', 'object_type': 'page', 'id': 'spec-123', 'url': 'https://notion.local/spec-123', 'parent_id': 'db-specs', 'preview': 'Latest API changes'}]\n&gt;&gt;&gt; decision_log = from_text(\"\"\"### Decision\\n- Adopt OAuth2\\n- Sunset legacy keys\"\"\")\n&gt;&gt;&gt; write_tool.run(update={\"page_id\": \"spec-123\", \"mode\": \"append\"}, blocks=decision_log)[\"summary\"]\n\"Appended 2 block(s) on page spec-123.\"\n</code></pre>"},{"location":"examples/#4-agent-style-confirmation-before-writing-to-notion","title":"4. Agent-style confirmation before writing to Notion","text":"<pre><code>&gt;&gt;&gt; async def agent_flow(prompt: str) -&gt; dict:\n...     proposal = from_text(f\"# Draft\\n{prompt}\")\n...     preview = write_tool.run(\n...         update={\"page_id\": \"spec-123\", \"mode\": \"append\"},\n...         blocks=proposal,\n...         is_dry_run=True,\n...     )\n...     # pretend we confirmed with the human\n...     return await write_tool.arun(\n...         update={\"page_id\": \"spec-123\", \"mode\": \"append\"},\n...         blocks=proposal,\n...     )\n&gt;&gt;&gt; asyncio.run(agent_flow(\"Summaries must call out risk items\"))[\"summary\"]\n'Appended 1 block(s) on page spec-123.'\n</code></pre>"},{"location":"json-schema/","title":"LLM-friendly JSON Schema","text":"<p>Both tools expose Pydantic models so you can derive machine-readable schemas for use with OpenAI function calling, Anthropic tool use, or LangChain's structured output APIs. Generate the schema at runtime to keep it in sync with the code:</p> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from langchain_notion_tools.tools import NotionSearchInput, NotionWriteInput\n&gt;&gt;&gt; json.dumps(NotionSearchInput.model_json_schema(), indent=2)\n'{\n  \"title\": \"NotionSearchInput\",\n  \"type\": \"object\",\n  ...\n}'\n</code></pre> <p>Below is a shortened excerpt of the current schemas to help you craft prompts:</p> <pre><code>{\n  \"title\": \"NotionSearchInput\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"query\": {\"type\": \"string\", \"description\": \"Full-text query passed to Notion.\"},\n    \"page_id\": {\"type\": \"string\", \"description\": \"Retrieve a specific page by ID.\"},\n    \"database_id\": {\"type\": \"string\", \"description\": \"Query a database by ID.\"},\n    \"filter\": {\"type\": \"object\", \"additionalProperties\": {}, \"description\": \"Optional filter payload forwarded to Notion.\"}\n  }\n}\n</code></pre> <pre><code>{\n  \"title\": \"NotionWriteInput\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\"type\": \"string\", \"description\": \"Title for the page.\"},\n    \"parent\": {\n      \"allOf\": [\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"page_id\": {\"type\": \"string\"},\n            \"database_id\": {\"type\": \"string\"}\n          },\n          \"description\": \"Exactly one of page_id or database_id must be supplied.\"\n        }\n      ]\n    },\n    \"blocks\": {\n      \"type\": \"array\",\n      \"items\": {\"type\": \"object\"},\n      \"description\": \"List of Notion block payloads.\"\n    },\n    \"update\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"page_id\": {\"type\": \"string\"},\n        \"mode\": {\"type\": \"string\", \"enum\": [\"append\", \"replace\"]}\n      },\n      \"description\": \"Update instructions for existing pages.\"\n    },\n    \"properties\": {\"type\": \"object\", \"additionalProperties\": {}},\n    \"is_dry_run\": {\"type\": \"boolean\", \"default\": false}\n  }\n}\n</code></pre> <p>When prompting an LLM, supply the JSON schema via the tool definition so the model knows which fields are required and how to format block payloads.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Follow these steps to add LangChain Notion Tools to a new or existing LangChain project.</p>"},{"location":"quickstart/#1-install-the-package","title":"1. Install the package","text":"<pre><code>pip install langchain-notion-tools\n</code></pre> <p>The package depends on <code>langchain-core</code>, <code>notion-client</code>, <code>httpx</code>, and <code>anyio</code>. They will be installed automatically.</p>"},{"location":"quickstart/#2-configure-credentials","title":"2. Configure credentials","text":"<p>Create an integration inside Notion and copy the internal integration token. Export it in your shell (or use your preferred secret manager):</p> <pre><code>export NOTION_API_TOKEN=\"secret_abc123\"\n</code></pre> <p>Optionally define a default parent page or database that new pages should inherit:</p> <pre><code>export NOTION_DEFAULT_PARENT_PAGE_ID=\"abcd1234efgh5678ijkl9012\"\n</code></pre> <p>Tokens are redacted in logs and are never written to disk.</p>"},{"location":"quickstart/#3-create-your-first-notion-page","title":"3. Create your first Notion page","text":"<pre><code>from langchain_notion_tools import NotionWriteTool\n\nwrite = NotionWriteTool()\npage = write.run(\n    title=\"LLM Release Planning\",\n    parent={\"page_id\": \"abcd1234efgh5678ijkl9012\"},\n    blocks=[\n        {\n            \"object\": \"block\",\n            \"type\": \"paragraph\",\n            \"paragraph\": {\n                \"rich_text\": [\n                    {\"type\": \"text\", \"text\": {\"content\": \"Kick-off the upcoming launch plan.\"}}\n                ]\n            },\n        }\n    ],\n)\nprint(page[\"summary\"])\n</code></pre> <p>The helper returns a JSON response summarising the write operation so you can log or confirm the result inside your agent.</p>"},{"location":"quickstart/#4-use-the-tools-in-langchain","title":"4. Use the tools in LangChain","text":"<pre><code>from langchain_core.runnables import RunnableParallel\nfrom langchain_notion_tools import NotionSearchTool, NotionWriteTool\n\nsearch = NotionSearchTool()\nwrite = NotionWriteTool()\n\nworkflow = RunnableParallel(\n    {\n        \"prior_art\": search.bind(query=\"product roadmap\"),\n        \"create\": write.bind(\n            parent={\"page_id\": \"abcd1234efgh5678ijkl9012\"},\n            title=\"LLM roadmap review\",\n            blocks=[\n                {\n                    \"object\": \"block\",\n                    \"type\": \"paragraph\",\n                    \"paragraph\": {\"rich_text\": [{\"type\": \"text\", \"text\": {\"content\": \"Draft body\"}}]},\n                }\n            ],\n            is_dry_run=True,\n        ),\n    }\n)\nresult = workflow.invoke({})\nprint(result[\"create\"][\"summary\"])\n</code></pre> <p>The tools are standard LangChain runnables. Bind arguments for reuse or call them directly inside custom agents.</p>"},{"location":"quickstart/#5-use-the-toolkit","title":"5. Use the toolkit","text":"<p>Prefer a bundled setup? The <code>NotionToolkit</code> factory wires both tools to the same underlying Notion clients, enabling shared retry policy and reduced connection overhead:</p> <pre><code>from langchain_notion_tools import create_toolkit\n\nnotion = create_toolkit()\nagent = RunnableParallel({\"search\": notion.search, \"write\": notion.write})\n</code></pre>"},{"location":"quickstart/#6-debug-with-the-cli","title":"6. Debug with the CLI","text":"<p>Two helper commands are installed automatically:</p> <pre><code># Search for OKRs\nnotion-search --query \"company okr\"\n\n# Append blocks created from Markdown to an existing page\nnotion-write --update-page \"abcd1234\" --blocks-from-text \"### Action Items\\n- Ship release\"\n</code></pre> <p>The CLI is invaluable when iterating on prompts or testing block conversions before handing control to an agent.</p>"}]}